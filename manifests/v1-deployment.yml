apiVersion: apps/v1
kind: Deployment
metadata:
  name: health-checker
  labels:
    app: health-checker
spec:
  progressDeadlineSeconds: 600
  replicas: 2
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      app: health-checker
  template:
    metadata:
      labels:
        app: health-checker
    spec:
      containers:
        - name: health-checker
          image: jakotoychubaev/young-rgb:v1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 8000
            timeoutSeconds: 1
          ports:
            - containerPort: 8000
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 8000
            timeoutSeconds: 1
          env:
            - name: EMAIL_SOURCE
              valueFrom:
                configMapKeyRef:
                  key: email_source
                  name: health-checker-cm
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  key: db_username
                  name: health-checker-secret
            - name: DB_PASS
              valueFrom:
                secretKeyRef:
                  key: db_password
                  name: health-checker-secret
          volumeMounts:
            - mountPath: "/config"
              name: config
              readOnly: true
      volumes:
        - name: config
          configMap:
            name: health-checker-cm
        - name: secrets
          secret:
            secretName: health-checker-secret
      hostname: health-checker
      restartPolicy: Always
      securityContext: {}
      terminationGracePeriodSeconds: 30
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate


